# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1, pars = c("beta", "nu", "ll"))
fit2_bayes$stanfit@stan_args
extract(fit2_bayes$stanfit)
fit2_bayes$stanfit@stanmodel
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1, pars = c("beta", "nu", "log_lik"))
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1, pars = c("beta", "nu", "log_lik"))
source('~/Documents/spsurv/inst/load.R')
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1, pars = c("beta", "nu", "log_lik"))
fit2_bayes$stanfit@stanmodel
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes$stanfit@stan_args
extract(fit2_bayes$stanfit)
fit2_bayes$stanfit@stanmodel
fit2_bayes$nullfit@model_pars
source('~/Documents/spsurv/inst/load.R')
source('~/Documents/spsurv/inst/load.R')
source('~/Documents/spsurv/inst/load.R')
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2
fit2
gc()
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2
source('~/Documents/spsurv/inst/load.R')
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes$stanfit@stanmodel
source('~/Documents/spsurv/inst/load.R')
library(spsurv)
source('~/Documents/spsurv/inst/load.R')
source('~/Documents/spsurv/inst/load.R')
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
source('~/Documents/spsurv/inst/load.R')
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
source(file = "inst/load.R")
library(spsurv)
## weibull aft
# db1 <- sim_surv(100, model = "aft")
# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes$stanfit@stan_args
fit2_bayes$nullfit@model_pars
loo::extract_log_lik(fit2_bayes$stanfit)
loo::loo(loo::extract_log_lik(fit2_bayes$stanfit))
loo::waic(loo::extract_log_lik(fit2_bayes$stanfit))
x<- loo::waic(loo::extract_log_lik(fit2_bayes$stanfit))
x$waic
fit2_bayes
summary(fit2_bayes)
print.spbp <-
function(spbp, digits = max(getOption('digits')-3, 3), ...){
savedig <- options(digits = digits)
on.exit(options(savedig))
if (!is.null(spbp$call)) {
cat("Call:\n")
dput(spbp$call)
cat("\n")
}
if(spbp$call$approach == "mle"){
coef <- spbp$coefficients[1:spbp$q]
var <- spbp$var[1:spbp$q, 1:spbp$q]
### Error handling ###
# Null model
if (is.null(spbp$coefficients)) return(spbp)
coef2 <- coef[!(is.na(coef))] #non-missing coefs
if(is.null(coef) | is.null(var )) stop("Input is not valid")
se <- suppressWarnings(sqrt(diag(spbp$var[1:spbp$q, 1:spbp$q])))
Coefmat  <- cbind(coef, exp(coef), se, coef/se,
pchisq((coef/ se)^2, 1, lower.tail=FALSE))
dimnames(Coefmat) <- list(names(coef), c("coef", "exp(coef)",
"se(coef)", "z", "Pr(>|z|)"))
if(!is.null(spbp$coefficients)) {
cat("\n")
printCoefmat(Coefmat, digits = digits,
signif.stars = signif.stars, ...)
}
if(!is.null(spbp$loglik)) {
cat("\n Loglik(model)= ", spbp$loglik[2])
cat("      Loglik(no predictors)= ", spbp$loglik[1], "\n")
}
logtest <- -2 * (spbp$loglik[1] - spbp$loglik[2])
cat("      Chisq= ", logtest," on ", spbp$q, " degrees of freedom ",
pchisq(logtest, spbp$q, lower.tail=FALSE), "\n")
if(!is.null(spbp$n)) {
cat("n= ", spbp$n)
}
}
else{
cat("\n")
summary <- summary(spbp$stanfit, pars = "beta")$summary
Coefmat <- cbind(summary[, 1], exp(summary[,1]), summary[, -c(1,5,7,9,10)])
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summary[, -c(1,5,7,9,10)]))
print(Coefmat)
cat("---")
print(spbp$waic)
print(spbp$loo)
}
}
fit2_bayes
print.spbp <-
function(spbp, digits = max(getOption('digits')-3, 3), ...){
savedig <- options(digits = digits)
on.exit(options(savedig))
if (!is.null(spbp$call)) {
cat("Call:\n")
dput(spbp$call)
cat("\n")
}
if(spbp$call$approach == "mle"){
coef <- spbp$coefficients[1:spbp$q]
var <- spbp$var[1:spbp$q, 1:spbp$q]
### Error handling ###
# Null model
if (is.null(spbp$coefficients)) return(spbp)
coef2 <- coef[!(is.na(coef))] #non-missing coefs
if(is.null(coef) | is.null(var )) stop("Input is not valid")
se <- suppressWarnings(sqrt(diag(spbp$var[1:spbp$q, 1:spbp$q])))
Coefmat  <- cbind(coef, exp(coef), se, coef/se,
pchisq((coef/ se)^2, 1, lower.tail=FALSE))
dimnames(Coefmat) <- list(names(coef), c("coef", "exp(coef)",
"se(coef)", "z", "Pr(>|z|)"))
if(!is.null(spbp$coefficients)) {
cat("\n")
printCoefmat(Coefmat, digits = digits,
signif.stars = signif.stars, ...)
}
if(!is.null(spbp$loglik)) {
cat("\n Loglik(model)= ", spbp$loglik[2])
cat("      Loglik(no predictors)= ", spbp$loglik[1], "\n")
}
logtest <- -2 * (spbp$loglik[1] - spbp$loglik[2])
cat("      Chisq= ", logtest," on ", spbp$q, " degrees of freedom ",
pchisq(logtest, spbp$q, lower.tail=FALSE), "\n")
if(!is.null(spbp$n)) {
cat("n= ", spbp$n)
}
}
else{
cat("\n")
summary <- summary(spbp$stanfit, pars = "beta")$summary
Coefmat <- cbind(summary[, 1], exp(summary[,1]), summary[, -c(1,5,7,9,10)])
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summary[, -c(1,5,7,9,10)]))
print(Coefmat)
cat("---"\n)
print(spbp$waic)
print(spbp$loo)
}
}
print.spbp <-
function(spbp, digits = max(getOption('digits')-3, 3), ...){
savedig <- options(digits = digits)
on.exit(options(savedig))
if (!is.null(spbp$call)) {
cat("Call:\n")
dput(spbp$call)
cat("\n")
}
if(spbp$call$approach == "mle"){
coef <- spbp$coefficients[1:spbp$q]
var <- spbp$var[1:spbp$q, 1:spbp$q]
### Error handling ###
# Null model
if (is.null(spbp$coefficients)) return(spbp)
coef2 <- coef[!(is.na(coef))] #non-missing coefs
if(is.null(coef) | is.null(var )) stop("Input is not valid")
se <- suppressWarnings(sqrt(diag(spbp$var[1:spbp$q, 1:spbp$q])))
Coefmat  <- cbind(coef, exp(coef), se, coef/se,
pchisq((coef/ se)^2, 1, lower.tail=FALSE))
dimnames(Coefmat) <- list(names(coef), c("coef", "exp(coef)",
"se(coef)", "z", "Pr(>|z|)"))
if(!is.null(spbp$coefficients)) {
cat("\n")
printCoefmat(Coefmat, digits = digits,
signif.stars = signif.stars, ...)
}
if(!is.null(spbp$loglik)) {
cat("\n Loglik(model)= ", spbp$loglik[2])
cat("      Loglik(no predictors)= ", spbp$loglik[1], "\n")
}
logtest <- -2 * (spbp$loglik[1] - spbp$loglik[2])
cat("      Chisq= ", logtest," on ", spbp$q, " degrees of freedom ",
pchisq(logtest, spbp$q, lower.tail=FALSE), "\n")
if(!is.null(spbp$n)) {
cat("n= ", spbp$n)
}
}
else{
cat("\n")
summary <- summary(spbp$stanfit, pars = "beta")$summary
Coefmat <- cbind(summary[, 1], exp(summary[,1]), summary[, -c(1,5,7,9,10)])
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summary[, -c(1,5,7,9,10)]))
print(Coefmat)
cat("---\n")
print(spbp$waic)
print(spbp$loo)
}
}
fit2_bayes
source(file = "inst/load.R")
library(spsurv)
## weibull aft
# db1 <- sim_surv(100, model = "aft")
# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
source(file = "inst/load.R")
library(spsurv)
## weibull aft
# db1 <- sim_surv(100, model = "aft")
# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
source(file = "inst/load.R")
source(file = "inst/load.R")
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
fit2_bayes
summary(fit2_bayes$stanfit)
summary(fit2_bayes$stanfit)$summary
summary(fit2_bayes$stanfit, pars = 'beta')$summary
class(summary(fit2_bayes$stanfit, pars = 'beta')$summary)
fit2_bayes$call
fit2_bayes$call$formula
fit2_bayes
class(fit2_bayes)
fit2_bayes
fit2_bayes
fit2
source(file = "inst/load.R")
source(file = "inst/load.R")
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
spbp <- fit2_bayes
summarise <- summary(spbp$stanfit, pars = "beta")$summary
summarise
Coefmat <- cbind(summarise[, 1], exp(summarise[,1]), summarise[, -c(1, 5, 7, 9, 10)])
Coefmat
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
rownames(Coefmat)
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summarise[, -c(1, 5, 7, 9, 10)]))
colnames(Coefmat)
print(Coefmat)
cat("---\n")
Coefmat2 <- cbind(exp(summarise[, -c(9, 10)]), summarise[, c(9, 10)])
print(Coefmat2)
print(spbp$waic)
print(spbp$loo)
library(spsurv)
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
fit2_bayes
summary(fit2_bayes)
fit2_bayes$call$approach
fit2
print.spbp <-
function(spbp, digits = max(getOption('digits')-3, 3),
signif.stars = signif.stars, ...){
savedig <- options(digits = digits)
on.exit(options(savedig))
if (!is.null(spbp$call)) {
cat("Call:\n")
dput(spbp$call)
cat("\n")
}
if(spbp$call$approach == "mle"){
coef <- spbp$coefficients[1:spbp$q]
var <- spbp$var[1:spbp$q, 1:spbp$q]
### Error handling ###
# Null model
if (is.null(spbp$coefficients)) return(spbp)
coef2 <- coef[!(is.na(coef))] #non-missing coefs
if(is.null(coef) | is.null(var )) stop("Input is not valid")
se <- suppressWarnings(sqrt(diag(spbp$var[1:spbp$q, 1:spbp$q])))
Coefmat  <- cbind(coef, exp(coef), se, coef/se,
pchisq((coef/ se)^2, 1, lower.tail=FALSE))
dimnames(Coefmat) <- list(names(coef), c("coef", "exp(coef)",
"se(coef)", "z", "Pr(>|z|)"))
if(!is.null(spbp$coefficients)) {
cat("\n")
printCoefmat(Coefmat, digits = digits,
signif.stars = signif.stars, ...)
}
if(!is.null(spbp$loglik)) {
cat("\n Loglik(model)= ", spbp$loglik[2])
cat("      Loglik(no predictors)= ", spbp$loglik[1], "\n")
}
logtest <- -2 * (spbp$loglik[1] - spbp$loglik[2])
cat("      Chisq= ", logtest," on ", spbp$q, " degrees of freedom ",
pchisq(logtest, spbp$q, lower.tail=FALSE), "\n")
if(!is.null(spbp$n)) {
cat("n= ", spbp$n)
}
}
else{
cat("\n")
summarise <- summary(spbp$stanfit, pars = "beta")$summary
Coefmat <- cbind(summarise[, 1], exp(summarise[,1]), summarise[, -c(1, 5, 7, 9, 10)])
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summarise[, -c(1, 5, 7, 9, 10)]))
print(Coefmat)
cat("---\n")
Coefmat2 <- cbind(exp(summarise[, -c(9, 10)]), summarise[, c(9, 10)])
print(Coefmat2)
cat("---\n")
print(spbp$waic)
print(spbp$loo)
}
}
fit2
print.spbp(fit2)
print.spbp <-
function(spbp, digits = max(getOption('digits')-3, 3),
signif.stars = getOption("show.signif.stars"), ...){
savedig <- options(digits = digits)
on.exit(options(savedig))
if (!is.null(spbp$call)) {
cat("Call:\n")
dput(spbp$call)
cat("\n")
}
if(spbp$call$approach == "mle"){
coef <- spbp$coefficients[1:spbp$q]
var <- spbp$var[1:spbp$q, 1:spbp$q]
### Error handling ###
# Null model
if (is.null(spbp$coefficients)) return(spbp)
coef2 <- coef[!(is.na(coef))] #non-missing coefs
if(is.null(coef) | is.null(var )) stop("Input is not valid")
se <- suppressWarnings(sqrt(diag(spbp$var[1:spbp$q, 1:spbp$q])))
Coefmat  <- cbind(coef, exp(coef), se, coef/se,
pchisq((coef/ se)^2, 1, lower.tail=FALSE))
dimnames(Coefmat) <- list(names(coef), c("coef", "exp(coef)",
"se(coef)", "z", "Pr(>|z|)"))
if(!is.null(spbp$coefficients)) {
cat("\n")
printCoefmat(Coefmat, digits = digits,
signif.stars = signif.stars, ...)
}
if(!is.null(spbp$loglik)) {
cat("\n Loglik(model)= ", spbp$loglik[2])
cat("      Loglik(no predictors)= ", spbp$loglik[1], "\n")
}
logtest <- -2 * (spbp$loglik[1] - spbp$loglik[2])
cat("      Chisq= ", logtest," on ", spbp$q, " degrees of freedom ",
pchisq(logtest, spbp$q, lower.tail=FALSE), "\n")
if(!is.null(spbp$n)) {
cat("n= ", spbp$n)
}
}
else{
cat("\n")
summarise <- summary(spbp$stanfit, pars = "beta")$summary
Coefmat <- cbind(summarise[, 1], exp(summarise[,1]), summarise[, -c(1, 5, 7, 9, 10)])
rownames(Coefmat) <-  all.vars(spbp$call$formula)[-c(1,2)]
colnames(Coefmat) <- c("mean", "exp(mean)", colnames(summarise[, -c(1, 5, 7, 9, 10)]))
print(Coefmat)
cat("---\n")
Coefmat2 <- cbind(exp(summarise[, -c(9, 10)]), summarise[, c(9, 10)])
print(Coefmat2)
cat("---\n")
print(spbp$waic)
print(spbp$loo)
}
}
fit2
fit2_bayes
source(file = "inst/load.R")
library(spsurv)
## weibull aft
# db1 <- sim_surv(100, model = "aft")
# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
source('~/Documents/spsurv/inst/test2.R')
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
summary(fit2_bayes)
summary(fit2_bayes)
fit2_bayes
fit2_bayes$call$formula
source(file = "inst/load.R")
library(spsurv)
## weibull aft
# db1 <- sim_surv(100, model = "aft")
# fit1 <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "mle", data = db1)
#
# fit1_bayes <- spbp(Surv(y,status) ~ x1 + x2,  model = "aft",
#              approach = "bayes", data = db1)
#
# pred1 <- fit1$linear.predictors
## weibull ph
db2 <- sim_surv(100)
fit2 <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "mle", data = db2)
fit2_bayes <- spbp(Surv(y,status)~ x1 + x2,  model = "ph",
approach = "bayes", data = db2, chains = 1)
fit2_bayes
