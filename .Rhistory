pseudod <- svd$d
pseudod[!zeros] <- svd$d[!zeros] <-  1/svd$d[!zeros]
S <- v %*% diag(pseudod) %*% t(u)
return(S)
}
fitmle <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "mle", model = "ph")
print(fitmle)
summary(fitmle)
library(survival)
cox
survivor.default <- function(time, arg = list(beta = NULL, loggamma = NULL), newdata,
model = c("ph", "po", "aft"), approach = c("mle", "bayes")){
if(sum(names(arg) %in% c("beta", "loggamma")) != 2)
stop('`args` names do not match')
## CALL EXCEPTION HANDLING
approach <- match.arg(approach)
model <- match.arg(model)
beta <- arg$beta
loggamma <- arg$loggamma
if(!is.vector(time))
stop("time is not a vector")
if(!is.vector(loggamma))
stop("loggamma is not a vector")
if(!is.vector(beta))
stop("beta is not a vector")
if(!is.data.frame(newdata))
stop("newdata is not a data.frame")
x <- newdata
degree <- length(loggamma)
k <- 1:degree
y <- time[order(time)]
tau <- max(y)
B <- matrix(sapply(k, function(k) pbeta(y/tau, k, degree - k + 1)), ncol = degree)
eta <- as.matrix(x) %*% matrix(beta, ncol = 1)
if(model == "ph"){
H0 <- apply(B, 1, function(x){exp(loggamma) %*% x})
H <- as.vector(exp(eta)) * H0
}
else if(model == "po"){
R0 <- apply(B, 1, function(x){exp(loggamma)  %*% x})
R <- as.vector(exp(eta)) * R0
H <- -log(1 + R)
}
else{
y_aft <- y / exp(eta)
tau_aft <- max(y_aft)
B <- matrix(sapply(k, function(k) pbeta(y_aft / tau_aft, k, degree - k + 1)), ncol = degree)
H <- apply(B, 1, function(x){exp(loggamma) %*% x})
}
return(exp(-H))
}
print(fit)
print(fitmle)
summary(fitmle)
summary(fit)
?spbp
fitmle <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "mle", model = "ph",
priors = list(hyper_gamma = 0.1, mean_beta = 0,
sd_beta = sqrt(10),
mean_nu = 0, sd_nu = sqrt(10)))
print(fitmle)
fitmle <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "mle", model = "ph")
print(fitmle)
summary(fitmle)
fit <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "bayes", model = "ph", chains = 1,
iter = 3000,
priors = list(hyper_gamma = 0.1, mean_beta = 0,
sd_beta = sqrt(10),
mean_nu = 0, sd_nu = sqrt(10))
)
print(fit)
fit <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "bayes", model = "ph", chains = 1,
iter = 3000,
priors = list(hyper_gamma = 0.1, mean_beta = 0,
sd_beta = 10,
mean_nu = 0, sd_nu = 10)
)
print(fit)
summary(fit)
print(fit)
fitmle
print(fit)
fit <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "bayes", model = "ph", chains = 1,
iter = 3000,
priors = list(hyper_gamma = 0.1, mean_beta = 0,
sd_beta = 10,
mean_nu = 0, sd_nu = 10)
)
summary(fit)
fitmle <- spbp(Surv(time, delta) ~ age + factor(stage),
data = larynx, approach =  "mle", model = "ph")
print(fitmle)
print(fit)
data("larynx") ## imports from survival package
spsurv::sim_surv(m = 1000)
MC <- 1000
x1 = rnorm(1000)
x1
?spsurv::sim_surv()
numerical = rnorm(1000)
numerical
categorical <- rbinom(rows, size = 3, prob = .5)
numerical = rnorm(MC)
categorical <- rbinom(MC, size = 3, prob = .5)
categorical
categorical <- factor(rbinom(MC, size = 3, prob = .5))
categorical
n = 200
MC <- 1000
numerical <-  replicate(rnorm(200))
numerical <-  replicate(MC, rnorm(200))
numerical
dim(numerical)
numerical <- rnorm(200)
categorical <- factor(rbinom(MC, size = 3, prob = .5))
categorical
set.seed(1)
n = 200
MC <- 1000
# replicate(MC
set.seed(1)
numerical <- rnorm(200)
categorical <- factor(rbinom(MC, size = 3, prob = .5))
categorical
categorical <- factor(rbinom(200, size = 3, prob = .5))
categorical
data.frame(numerical, categorical)
rm(list = ls())
n = 200
n = 200
n = 200
n
MC <- 1000
MC
# replicate(MC
set.seed(1)
numerical <- rnorm(200)
categorical <- factor(rbinom(200, size = 3, prob = .5))
numerical
categorical
rnorm(200)
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
factor(rbinom(200, size = 3, prob = .5))
# replicate(MC
set.seed(1)
numerical <- rnorm(200)
numerical
numerical
numerical
numerical
numerical
numerical
numerical
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rnorm(200)
rm(list = ls())
n = 200
MC <- 1000
# replicate(MC
set.seed(1)
categorical <- factor(rbinom(200, size = 3, prob = .5))
generate <- function(step, n){
features <- list()
features[step] <- data.frame(rnorm(n),
factor(rbinom(n, size = 3)))
return(features)
}
generate(1,10)
generate <- function(step, n){
features <- list()
features[step] <- data.frame(rnorm(n),
factor(rbinom(n, size = 3, prob = .5)))
return(features)
}
generate(1,10)
generate <- function(step, n){
features <- list()
features[[step]] <- data.frame(rnorm(n),
factor(rbinom(n, size = 3, prob = .5)))
return(features)
}
generate(1,10)
generate <- function(step, n){
features <- list()
features[[step]] <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5)))
return(features)
}
generate(1,10)
class(generate(1,10))
class(generate(1,10)[[1]])
class(generate(1,10)[[1]]$num)
class(generate(1,10)[[1]]$cat)
rm(list = ls())
n = 200
n <-  200
n <-200
n <- 200
MC <- 1000
n
MC
# replicate(MC
set.seed(1)
generate <- function(step, n){
features <- list()
features[[step]] <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5)))
return(features)
}
generate <- function(n){
features <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(100)
generate(200)
replicate(MC, generate())
replicate(MC, generate(n))
generate <- function(n){
res <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(res)
}
features <- replicate(MC, generate(n))
features[1]
features[2]
features[3]
features[3]
features[[1]]
View(features)
generate(n)
features[1:MC] <- replicate(MC, generate(n))
1:MC
features <- list()
features[1:MC] <- replicate(MC, generate(n))
features <- list()
features[[1:MC]] <- replicate(MC, generate(n))
features
features <- list()
features <- list()
features[1:MC] <- data.frame()
features
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
data.frame()
features[1:MC] <- replicate(MC, generate(n))
features
features <- list()
generate <- function(n){
res <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(res)
}
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
rm(list = ls())
n <- 200
MC <- 1000
generate <- function(n){
res <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(res)
}
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate(n)
generate <- function(step, n){
features[step] <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(1)
generate(1, 200)
generate <- function(step, n){
features <- list()
features[step] <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(1, 200)
generate <- function(step, n){
features <- list()
features[[step]] <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(n)
generate(1, 200)
generate(2, 200)
generate(1:2, 200)
1:2
generate(1:2, 200)
generate <- function(step, n){
features <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate <- function(n){
features <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(200)
features <- list()
sapply(features, `[`,generate(n))
features <- list()
sapply(features, `[`,generate(n))
generate(n)
generate(n)
generate(n)
generate(n)
sapply(features, `[ <-`, generate(n))
sapply(features, `[`, generate(n))
features
replicate(MC, generate(n))
replicate(n = MC, generate(n), simplify = "list")
features <- replicate(n = MC, generate(n), simplify = "list")
features
View(features)
features <- replicate(n = MC, generate(n), simplify = "matrix")
View(features)
for(i in 1:MC){
features[[i]] <- generate(n)
}
for(i in 1:MC){
features[i] <- generate(n)
}
warnings()
as.character(1:MC)
features[as.character(1:MC)]
features[as.character(1:MC)] <- NA
features[as.character(1:MC)] <- generate(n)
features
rm(features)
features[as.character(1:MC)] <- generate(n)
features <- list()
features[as.character(1:MC)] <- generate(n)
features
features$`1`
generate(n)
as.character(1:MC)
rm(list = ls())
n <- 200
MC <- 1000
MC
n
generate <- function(n){
features <- data.frame(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5))
)
return(features)
}
generate(n)
as.character(1:MC)
features <-
list()
features[[as.character(1:MC)]] <- generate(n)
lapply(1:MC, 1, generate(n))
lapply(1:MC, generate(n))
generate(n)
replicate(1:MC, generate(n))
replicate(1:MC, generate(n))
replicate(n = MC, generate(n))
generate <- function(n){
features <- matrix(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5)),
ncol = 2
)
return(features)
}
replicate(n = MC, generate(n))
generate(n)
generate(n)
generate(n)
generate(n)
generate <- function(n){
features <- matrix(num = rnorm(n),
cat = factor(rbinom(n, size = 3, prob = .5)),
ncol = 2
)
return(features)
}
generate <- function(n){
features <- matrix(c(rnorm(n),
factor(rbinom(n, size = 3, prob = .5))),
ncol = 2
)
return(features)
}
replicate(n = MC, generate(n))
features <- replicate(n = MC, generate(n))
features
generate <- function(n){
features <- matrix(c(rnorm(n),
factor(rbinom(n, size = 3, prob = .5))),
ncol = 2
)
colnames(features) <- c("numerical", "categorical")
return(features)
}
features <- replicate(n = MC, generate(n))
features
features[,,1]
MC
source('~/Documents/spsurv/script/load.R', echo=TRUE)
