degree <- ceiling(sqrt(nrow(data)))
}
## Call
Call <- match.call();
## model
if(length(model) == 3){model_flag = "ph";}
else{model_flag <- model;}
model <- ifelse(match.arg(model) == "po", 0,
ifelse(match.arg(model) == "ph", 1, 2))
## approach
approach_flag <- approach ### saves string input
approach <- ifelse(match.arg(approach) == "mle", 0, 1)
handler1() ## error handling #1
## terms
temp <- Call[c(1, aux)] # keep important args
temp[[1L]] <- quote(stats::model.frame) # model frame call
special <- c("frailty", "frailty.gamma", "frailty.gaussian", "frailty.t")
temp$formula <- terms(formula, special, data = data)
temp$formula <- terms(formula, data = data);
## frailty (id, distribution, column)
handler2()
## Priors
suppressMessages(handler3())
## stanArgs
stanArgs <- list(...)
handler4()
## Model Frame
mf <- eval(temp, parent.frame())
Terms <- terms(mf)
Y <- model.extract(mf, "response") # time-to-event response
type <- attr(Y, "type")
handler5()
# ---------------  Data declaration + definitions ---------------
## + sample size + labels
data.n <- nrow(Y)
labels <- attributes(temp$formula)$term.labels
null <- 0
if (length(labels) > 1){
X <-  model.matrix(Terms, mf)[, -1]
}
else if(length(labels) == 1){
X <- as.matrix(model.matrix(Terms, mf)[, -1], ncol = data.n)
colnames(X) <- labels
}
else{
X <- as.matrix(rep(0, data.n), ncol = data.n)
colnames(X) <- "non-parametric"
null <- 1
}
## time + status + features
features <- X
attr(X, "assign") <- attr(model.matrix(Terms, mf), "assign")[-1]
attr(X, "contrasts") <- attr(model.matrix(Terms, mf), "contrasts")
xlevels <- .getXlevels(Terms, mf)
contrasts <- attr(X, "contrasts")
assign <- attrassign(X, Terms)
if(scale == T){
X <- scale(X)
std <- attr(X, "scaled:scale")
## rescaled coefficients (correction)
if(model == 2){ ## AFT
wsum <- exp(sum(attr(X, "scaled:center")/ attr(X, "scaled:scale")))
}
else{
wsum <- exp(-sum(attr(X, "scaled:center")/ attr(X, "scaled:scale")))
}
}
else{
print(q)
std <- rep(1, q)
wsum <- 1
}
print(std)
print(wsum)
q <- ncol(X)
time <- as.vector(Y[,1])
tau <- max(time)
status <- as.vector(Y[,2])
## base calculations
base <- bp.basis(time, degree = degree, tau = tau)
## priors to num
priordist <- sapply(priordist,
function(x){
switch(x,
"normal" = 0,
"gamma" = 1,
"inv_gamma" = 2,
"lognormal" = 3)})
priordist_beta <- sapply(priordist_beta,
function(x){switch(x,
"normal" = 0,
"cauchy" = 1)})
## Recycling
priordist_beta <- array(priordist_beta, dim = q)
location_beta <- array(location_beta, dim = q)
scale_beta <- array(scale_beta, dim = q)
## standata
standata <- list(time = time,
tau = tau,
n = data.n,
m = base$degree,
q = q,
status = status,
X = X,
B = base$B,
b = base$b,
approach = approach,
M = model,
null = null,
id = rep(1, data.n),
dist = dist,
z = rep(0, data.n),
priordist = as.numeric(priordist),
priorpars = as.numeric(priorpars),
priordist_beta = as.numeric(priordist_beta),
location_beta = as.numeric(location_beta),
scale_beta = as.numeric(scale_beta),
std  = std,
wsum = wsum
)
# --------------- Fit  ---------------
output <- list()
if(approach == 0){
spbp.mle(standata = standata, ...)
}
else{
spbp.bayes(standata = standata, ...)
}
}
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = F)
spbp.default <-
function(formula, degree, data,
approach = c("mle", "bayes"),
model = c("ph", "po", "aft"),
priors = list(beta = c("normal(0,4)"),
gamma = "lognormal(0,4)"
), scale = F,
...){
# ---------------Definitions + error handling  ---------------
## tau degree
if(missing(degree)){
degree <- ceiling(sqrt(nrow(data)))
}
## Call
Call <- match.call();
## model
if(length(model) == 3){model_flag = "ph";}
else{model_flag <- model;}
model <- ifelse(match.arg(model) == "po", 0,
ifelse(match.arg(model) == "ph", 1, 2))
## approach
approach_flag <- approach ### saves string input
approach <- ifelse(match.arg(approach) == "mle", 0, 1)
handler1() ## error handling #1
## terms
temp <- Call[c(1, aux)] # keep important args
temp[[1L]] <- quote(stats::model.frame) # model frame call
special <- c("frailty", "frailty.gamma", "frailty.gaussian", "frailty.t")
temp$formula <- terms(formula, special, data = data)
temp$formula <- terms(formula, data = data);
## frailty (id, distribution, column)
handler2()
## Priors
suppressMessages(handler3())
## stanArgs
stanArgs <- list(...)
handler4()
## Model Frame
mf <- eval(temp, parent.frame())
Terms <- terms(mf)
Y <- model.extract(mf, "response") # time-to-event response
type <- attr(Y, "type")
handler5()
# ---------------  Data declaration + definitions ---------------
## + sample size + labels
data.n <- nrow(Y)
labels <- attributes(temp$formula)$term.labels
null <- 0
if (length(labels) > 1){
X <-  model.matrix(Terms, mf)[, -1]
}
else if(length(labels) == 1){
X <- as.matrix(model.matrix(Terms, mf)[, -1], ncol = data.n)
colnames(X) <- labels
}
else{
X <- as.matrix(rep(0, data.n), ncol = data.n)
colnames(X) <- "non-parametric"
null <- 1
}
## time + status + features
features <- X
attr(X, "assign") <- attr(model.matrix(Terms, mf), "assign")[-1]
attr(X, "contrasts") <- attr(model.matrix(Terms, mf), "contrasts")
xlevels <- .getXlevels(Terms, mf)
contrasts <- attr(X, "contrasts")
assign <- attrassign(X, Terms)
q <- ncol(X)
time <- as.vector(Y[,1])
tau <- max(time)
status <- as.vector(Y[,2])
if(scale == T){
X <- scale(X)
std <- attr(X, "scaled:scale")
## rescaled coefficients (correction)
if(model == 2){ ## AFT
wsum <- exp(sum(attr(X, "scaled:center")/ attr(X, "scaled:scale")))
}
else{
wsum <- exp(-sum(attr(X, "scaled:center")/ attr(X, "scaled:scale")))
}
}
else{
std <- rep(1, q)
wsum <- 1
}
## base calculations
base <- bp.basis(time, degree = degree, tau = tau)
## priors to num
priordist <- sapply(priordist,
function(x){
switch(x,
"normal" = 0,
"gamma" = 1,
"inv_gamma" = 2,
"lognormal" = 3)})
priordist_beta <- sapply(priordist_beta,
function(x){switch(x,
"normal" = 0,
"cauchy" = 1)})
## Recycling
priordist_beta <- array(priordist_beta, dim = q)
location_beta <- array(location_beta, dim = q)
scale_beta <- array(scale_beta, dim = q)
## standata
standata <- list(time = time,
tau = tau,
n = data.n,
m = base$degree,
q = q,
status = status,
X = X,
B = base$B,
b = base$b,
approach = approach,
M = model,
null = null,
id = rep(1, data.n),
dist = dist,
z = rep(0, data.n),
priordist = as.numeric(priordist),
priorpars = as.numeric(priorpars),
priordist_beta = as.numeric(priordist_beta),
location_beta = as.numeric(location_beta),
scale_beta = as.numeric(scale_beta),
std  = std,
wsum = wsum
)
# --------------- Fit  ---------------
output <- list()
if(approach == 0){
spbp.mle(standata = standata, ...)
}
else{
spbp.bayes(standata = standata, ...)
}
}
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = F)
summary(fitmle)
summary(fitmle)
summary(fitmle)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = F)
mean(dat$status)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = T)
summary(fitmle)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = T)
summary(fitmle)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = T)
summary(fitmle)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = F)
summary(fitmle)
fitmle <- spbp(Surv(y, status)~ ., data = dat,
approach = "mle", model = "po", scale = F)
summary(fitmle)
fitmle$coefficients
# coxph(Surv(y, status)~., data = dat)
library("timereg")
prop.odds(Event(y, status)~., data = dat)
fitbe1 <- spbp(Surv(y, status)~., data = dat,
approach = "bayes", model = "ph",
priors = list(beta = c("normal(0,4)", "normal(0,4)"),
gamma = "lognormal(0,4)")
)
summary(fitbe1)
## Data
library(KMsurv)
data("larynx")
## Fit
fitmle <- spbp(Surv(time, delta) ~ age + factor(stage), data = larynx, scale = T)
library("KMsurv")
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
spbp(Surv(time, delta)~ age + factor(stage), data = dat)
spbp(Surv(time, delta)~ age + factor(stage), data = larynx)
spbp(Surv(time, delta)~ age + factor(stage), scale = T, data = larynx)
spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
spbp(Surv(time, delta)~ age + factor(stage), scale = F,
data = larynx)
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = F,
data = larynx)
fitmle
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
fitmle
fitmle$
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe$stanfit
fitbe
fitmle$
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
fitmle
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe
fitbe$stanfit
View(fitbe$stanfit)
print(fitbe, pars = "beta_std")
print(fitbe, pars = "beta")
print(fitbe, pars = "gamma_std")
print(fitbe, pars = "gamma")
print(fitbe$stanfit, pars = "gamma")
print(fitbe$stanfit, pars = "gamma_std")
print(fitbe$stanfit, pars = "beta_std")
fitbe$stanfit, pars = "beta_std"
print(fitbe$stanfit, pars = "beta_std")
print(fitbe$stanfit, pars = "beta")
print(fitbe$stanfit, pars = "beta_std")
print(fitbe$stanfit, pars = "beta")
fitmle
## approach
approach = "mle"
approach_flag <- match.arg(approach) ### saves string input
source('~/Documents/spsurv/R/spbp.R', echo=TRUE)
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
length(stanfit$par)
length(1)
len = 100
q = 2
degree = 10
(len-q + degree+1)
len-q - degree+1
q
10
source('~/Documents/spsurv/script/load.R', echo=TRUE)
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
source('~/Documents/spsurv/R/spbp.R', echo=TRUE)
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
source('~/Documents/spsurv/R/spbp.R', echo=TRUE)
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
fitmle
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = F,
data = larynx, approach  = "bayes")
fitbe
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = F,
data = larynx)
fitmle
source('~/Documents/spsurv/script/load.R', echo=TRUE)
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx)
fitmle
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
fitmle
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe
print(fitbe$stanfit, pars = "beta_std")
traceplot(fitbe$stanfit, pars = "beta_std")
stan_dens(fitbe$stanfit, pars = "gamma_std")
traceplt(fitbe$stanfit, pars = "gamma_std")
traceplot(fitbe$stanfit, pars = "gamma_std")
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
fitmle
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
rm(list = ls())
library("KMsurv")
data("larynx")
library("spsurv")
fitmle <- spbp(Surv(time, delta)~ age + factor(stage),
data = larynx)
fitmle
fitbe <- spbp(Surv(time, delta)~ age + factor(stage), scale = T,
data = larynx, approach  = "bayes")
fitbe
traceplot(fitbe$stanfit, pars = c("beta_std", "gamma_std"))
traceplot(fitbe$stanfit, pars = c("gamma_std", "gamma_std"))
stan_dens(fitbe$stanfit, pars = c("gamma_std", "gamma_std"))
survivor(fitbe)
plot(survivor(fitbe))
plot(survivor(fitmle))
plot(survivor(fitbe))
plot(survivor(fitbe))
curve(survivor(fitmle))
points(survivor(fitmle))
plot(survivor(fitbe), col = 2)
points(survivor(fitmle), col = 4)
source('~/Documents/spsurv/R/survivor.R', echo=TRUE)
plot(survivor(fitbe), col = 2)
points(survivor(fitmle), col = 4)
plot(survivor(fitbe, newdata = c(77, 1)), col = 2)
plot(survivor(fitbe, newdata = data.frame(77, 1)), col = 2)
model.matrix(fitbe)
source('~/Documents/spsurv/R/survivor.R', echo=TRUE)
smle <- survivor(fitmle, newdata = data.frame(77, 0, 0, 0))
data.frame(77, 0, 0, 0)
source('~/Documents/spsurv/R/survivor.R', echo=TRUE)
smle <- survivor(fitmle, newdata = data.frame(77, 0, 0, 0))
sbe <- survivor(fitbe, newdata = data.frame(77, 0, 0, 0))
plot(smle, col = 2)
points(sbe, col = 4)
plot(smle, col = 2, ylim = c(0,1))
plot(smle, col = 2)
points(sbe, col = 4)
smle1 <- survivor(fitmle, newdata = data.frame(77, 0, 0, 0))
sbe1 <- survivor(fitbe, newdata = data.frame(77, 0, 0, 0))
smle1 <- survivor(fitmle, newdata = data.frame(77, 1, 0, 0))
sbe1 <- survivor(fitbe, newdata = data.frame(77, 1, 0, 0))
plot(smle, col = 2)
points(sbe, col = 4)
smle2 <- survivor(fitmle, newdata = data.frame(77, 0, 1, 0))
sbe2 <- survivor(fitbe, newdata = data.frame(77, 0, 1, 0))
plot(smle1, col = 2)
points(sbe1, col = 4)
plot(smle2, col = 2)
points(sbe2, col = 4)
smle3 <- survivor(fitmle, newdata = data.frame(77, 0, 0, 1))
sbe3 <- survivor(fitbe, newdata = data.frame(77, 0, 0, 1))
plot(smle3, col = 2)
points(sbe3, col = 4)
summary(sbe3)
stan_dens(fitbe$stanfit, pars = c("gamma_std", "gamma_std"))
cbind(smle3, sbe3)
cbind(smle1, sbe1)
cbind(smle2, sbe2)
fitbe$pmode
source('~/Documents/spsurv/R/survivor.R', echo=TRUE)
smle1 <- survivor(fitmle, newdata = data.frame(77, 0, 0, 0))
sbe1 <- survivor(fitbe, newdata = data.frame(77, 0, 0, 0))
sbe1 <- survivor(fitbe, newdata = data.frame(77, 0, 0, 0))
source('~/Documents/spsurv/R/survivor.R', echo=TRUE)
smle1 <- survivor(fitmle, newdata = data.frame(77, 0, 0, 0))
sbe1 <- survivor(fitbe, newdata = data.frame(77, 0, 0, 0))
cbind(smle1, sbe1)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
source('~/Documents/spsurv/script/load.R', echo=TRUE)
