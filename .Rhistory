lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
print(grad)
####
print(dim(X))
print(dim(gamma))
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
print(dim(B))
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
ord = order(time)
plot(time[ord], surv[ord], type = 'l')
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
print(grad)
####
print(dim(X))
print(dim(gamma))
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
print(dim(B))
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
# ord = order(time)
plot(time, surv, type = 'l')
lines(time, upper, lty = 2)
lines(time, lower, lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
# ord = order(time)
plot(time, surv, type = 'l')
lines(time, upper, lty = 2)
lines(time, lower, lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
# ord = order(time)
points(time, surv)
lines(time, upper, lty = 2)
lines(time, lower, lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
ord = order(time)
points(time[ord], surv[ord])
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
ord = order(time)
points(time[ord], surv[ord])
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
plot(fit)
rm(list = ls())
options(scipen = 9999)
library(spsurv)
library(survival)
data("larynx")
str(larynx)
fit <- spbp(Surv(time, delta) ~  factor(stage) + age,
approach = 'mle', model = 'ph', data = larynx)
fit
plot(fit)
summary(fit)
fit$call$data
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
ord = order(time)
points(time[ord], surv[ord])
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
ord = order(time)
plot(time[ord], surv[ord])
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
plot.spbp <- function(spbp, tau = max(spbp$y[,1]), conf_level = .95){
alpha <- 1 - conf_level; ## signif level
upper <- NULL; lower = NULL; surv_var = NULL;  ## lower, upper bound, var
time <- spbp$y[,1]
q <- spbp$q; n = length(time)
gamma <- matrix(spbp$coef[(q + 1):length(spbp$coef)], ncol = 1)
degree <- length(gamma)
beta <- matrix(spbp$coef[1:q], ncol = 1) ## coef. vector
pred <- spbp$linear_predictors
time_scaled <- spbp$y[,1] / tau ## saled time
X <- model.matrix(spbp) ## DESIGN MATRIX
grad <- matrix(NA, nrow = n, ncol = length(spbp$coefficients))
####
if(spbp$model == "ph"){
b <-  bp(time = time, m = degree, tau = tau)$b
B <-  bp(time = time, m = degree, tau = tau)$B
surv <-  exp(-(B %*% gamma) * exp(pred))
for(j in (1:q)){ ## coef indexes
grad[, j] = (B %*% gamma) * ( as.matrix(X[, -j]) %*% as.vector(beta[-j]) + X[,j]) *
exp(pred) * surv
}
for(k in (1:(length(spbp$coef)-q))){ ## polynomial indexes
grad[, (k + q)] = (-B[, -k] %*% gamma[-k]  + B[, k]) *
exp(pred) * surv
}
}
else if(spbp$model == "po"){
cat('void')
}
else{
#
#     tau = max(time / exp(pred))
#     time_scaled = spbp$y[,1] / tau
#
#     b = bp(time_scaled, m =  degree, tau = tau)$b
#     B = bp(time_scaled, m =  degree, tau = tau)$B
#     grad = NULL ## gradient
#
#     grad[j] = -(gamma %*% b) * (exp(spbp$linar_predictors) ^ 2) / time
#     grad[k] = t(gamma[-k]) %*% B[-k, -k] + B[k, k]
cat('void')
}
for(i in 1:n){
# surv_var[i, ] = t(grad[i, ]) %*% spbp$var %*% grad[i, ] ## delta method
surv_var[i] = t(grad[i, ]) %*% spbp$var %*% grad[i, ]
}
lower = surv - qnorm(1-(alpha/2)) * sqrt(surv_var/n)
upper = surv + qnorm(1-(alpha/2)) * sqrt(surv_var/n)
print(lower)
ord = order(time)
plot(time[ord], surv[ord])
lines(time[ord], upper[ord], lty = 2)
lines(time[ord], lower[ord], lty = 2)
}
plot(fit)
