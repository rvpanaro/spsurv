y = seq(0, -2.5, length=n)
y
#Set plot points
x = seq(-1.4, 1.4, length=n)
y = seq(0, -2.5, length=n)
fr = function(x, y) {return(abs(X*Y)/2 - 3*a*X^2/4 - 4*a*Y^2/7 - a*Y) }
z = outer(x, y, fr)
#Set plot points
x = seq(-1.4, 1.4, length=n)
y = seq(0, -2.5, length=n)
fr = function(x, y) {return(abs(X*Y)/2 - 3*X^2/4 - 4*Y^2/7 - Y) }
z = outer(x, y, fr)
z
z = outer(x, y, fr)
y
x
y
x
z = outer(x, y, fr)
fr = function(x, y) {return(abs(X*Y)/2 - 3*X^2/4 - 4*Y^2/7 - Y) }
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y) {return(abs(X*Y)/2 - 3*X^2/4 - 4*Y^2/7 - Y) }
f
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y) {return(abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y) }
f
z = outer(x, y, fr)
f <-  function(x, y) {return(abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y) }
f(1,1)
f(10,10)
f(-10,10)
f(-10,-10)
z = outer(x, y, f)
z
z[is.na(z)] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot")
x
n
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
x
y <- seq(0, -2.5, length=n)
f <-  function(x, y) {return(abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y) }
z = outer(x, y, f)
z
z[is.na(z)] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot")
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
if(z <= 0 ) z = NA
return(z)
}
z = outer(x, y, f)
z[is.na(z)] = 1
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
if(z < 0 ) return(NA)
return(z)
}
z = outer(x, y, f)
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
return(z)
}
z = outer(x, y, f)
z
z<0
z[z<0] = 1
z
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot")
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.axis = 2)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.axis = "white")
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.grid = 2)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2, color = 2)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2, highlight.3d = TRUE)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2, highlight.3d = TRUE, angle = 90 )
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2, highlight.3d = TRUE, angle = 90)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", col.lab = 2, highlight.3d = TRUE)
scatterplot3d(x,y,z,color="lightblue",pch=21,main="3-D Scatter Plot", highlight.3d = TRUE)
scatterplot3d(x,y,z, color="red",pch=21,main="3-D Scatter Plot")
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico")
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!")
install.packages("scatterplot3d")
require(scatterplot3d)
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!")
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 90)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 180)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 45)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 360)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 270)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 10)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = 20)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -90)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -180)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -360)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -10)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -20)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -30)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -60)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -90, )
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -180, )
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", angle = -90, )
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, tick.marks = T)
scatterplot3d(z, x,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F)
scatterplot3d(y, x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 180)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 90)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = -90)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 90)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = -270)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = -270)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 270)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 10)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 20)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 30)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F, angle = 50)
scatterplot3d(y,x,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = F)
scatterplot3d(x,y,z, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle = 90)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle =180)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle =270)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle =-180)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle =-09)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T, angle =-90)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
scatterplot3d(x,z,-y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 + 4*y^2/7 + y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,z,-y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
install.packages("scatterplot3d")
require(scatterplot3d)
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,z,-y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
# install.packages("scatterplot3d")
require(scatterplot3d)
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 + y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,z,-y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
install.packages("scatterplot3d")
n  = 100
install.packages("scatterplot3d")
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
# install.packages("scatterplot3d")
require(scatterplot3d)
n  = 100
#Set plot points
x <- seq(-1.4, 1.4, length=n)
y <- seq(0, -2.5, length=n)
f <-  function(x, y){
z  = abs(x*y)/2 - 3*x^2/4 - 4*y^2/7 - y
return(z)
}
z = outer(x, y, f)
z[z<0] = 1
#Plot using scatterplot 3d
X = expand.grid(x,y)
x = X[,1]
y = X[,2]
z = c(z)
scatterplot3d(x,z,y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
scatterplot3d(x,z,-y, color="red",pch=21,main="Feliz dia do Estatístico!", axis = T)
citation(stats)
citation('stats')
################################## BAYESIAN ESTIMATION ##################################
rm(list = ls()); graphics.off(); library(survival);
set.seed(1)
# options(scipen = 9999, OutDec = ".", digits = 4)
library(KMsurv)
data("larynx")
dat <- larynx; rm(larynx)
dat$age <- as.numeric(scale(dat$age, scale = F))
dat$stage2 = as.numeric(scale(as.numeric(dat$stage == 2), scale = F))
dat$stage3 = as.numeric(scale(as.numeric(dat$stage == 3), scale = F))
dat$stage4 = as.numeric(scale(as.numeric(dat$stage == 4), scale = F))
cox <- coxph(Surv(dat$time, dat$delta) ~ age + stage2 + stage3 + stage4,
data = dat)
source('fun.R')
setwd("~/Documents/spsurv/inst/PH")
source('fun.R')
# prior
a_gammak = .01
b_gammak = .01
a_gammak / b_gammak
## [1] 1
a_gammak / (b_gammak)^2
## [1] 100
m_beta <- rep(0, q)
S_beta <- diag(100, q, q)
## Gibbs sampling
t <- 1; it <- 2000
par_samp <- matrix(NA, it, m + q); colnames(par_samp) <- c(paste0("gamma", 1:m), paste0("beta", 1:q))
par <- c(rep(1, m), rep(0, q)); start_time <- Sys.time()
while(t < it + 1){
for(k in 1:m){
samp <- HI::arms(.5, myldens = function(y) l_gammak(y, k = k,
par = par,m = m, Z = Z, b = b, B = B, delta = delta),
indFunc = function(x){(x > 0) * (x < 1)}, n.sample = 1 )
par_samp[t, k] <- -log(samp)
par[k] <- par_samp[t, k]
}
for(j in (m + 1):(m + q)){
samp <- HI::arms( .5, myldens = function(y) l_betaj(y, j = j,
par = par, m = m, Z = Z, b = b, B = B, delta = delta),
indFunc = function(x){(x > 0) * (x <1)}, n.sample = 1 )
par_samp[t, j] <- log(samp) - log(1 - samp)
par[j] <- par_samp[t, j]
}
cat( "\f", "Iteration", t, " out of ", it,". Time spent ",  Sys.time() - start_time)
t <- t + 1
}
library(coda)
samp1 <- mcmc(par_samp[((it/2)+1):it,11:14]) # 16.46 sec
traceplot(samp1[,1], main = '', bty = 'n')
traceplot(samp1[,2], main = '', bty = 'n')
traceplot(samp1[,3], main = '', bty = 'n')
traceplot(samp1[,4], main = '', bty = 'n')
densplot(samp1[,1], main = '', bty = 'n')
densplot(samp1[,2], main = '', bty = 'n')
densplot(samp1[,3], main = '', bty = 'n')
densplot(samp1[,4], main = '', bty = 'n')
exp_samp1 <- exp(samp1)
traceplot(exp_samp1[,1], main = '', bty = 'n')
traceplot(exp_samp1[,2], main = '', bty = 'n')
traceplot(exp_samp1[,3], main = '', bty = 'n')
traceplot(exp_samp1[,4], main = '', bty = 'n')
densplot(exp_samp1[,1], main = '', bty = 'n')
densplot(exp_samp1[,2], main = '', bty = 'n')
densplot(exp_samp1[,3], main = '', bty = 'n')
densplot(exp_samp1[,4], main = '', bty = 'n')
library(coda)
xtable::xtable(cbind(Median = apply(samp1, 2, median), summary(samp1)[[1]],
HPDL = coda::HPDinterval(samp1)[,1], HPDU = coda::HPDinterval(samp1)[,2])[,c(1,2,3,6,7)], digits = 4)
round(exp(round(apply(samp1, 2, mean), 4)),4)
exp_samp <- exp(samp1)
exp_samp
exp_samp1 <- exp(samp1)
xtable::xtable(cbind(Median = apply(samp1, 2, median), summary(samp1)[[1]],
HPDL = coda::HPDinterval(samp1)[,1], HPDU = coda::HPDinterval(samp1)[,2])[,c(1,2,3,6,7)], digits = 4)
xtable::xtable(cbind(Median = apply(exp_samp1, 2, median), summary(exp_samp1)[[1]],
HPDL = coda::HPDinterval(exp_samp1)[,1], HPDU = coda::HPDinterval(exp_samp1)[,2])[,c(1,2,3,6,7)], digits = 4)
print((round(apply(samp1, 2, mean), 4) - round(cox$coefficients, 4))/round(cox$coefficients, 4) *100, digits = 5)
round(exp(round(apply(samp1, 2, mean), 4)),4)
require(spsurv)
fitbe <- spbp(Surv(dat$time, dat$delta) ~ age + factor(stage),
data = dat, approach = 'bayes', chain = 1)
## Proportional Odds Example according to Bennet (1983)
rm(list = ls(all = T))
library(survival)
data(veteran)
## Only 97 patients with no prior therapy are considered
library(xtable)
# table(veteran$prior)
dat <- veteran[veteran$prior == 0,]; rm(veteran)
# xtable(cbind(taux, dat$karno, dat$celltype))
## Performance status measure
summary(dat$karno)
# Patients with high (over 50) and low performance status (PS)
dat$PS <- cut(dat$karno,c(0,50, 100), labels = c("Low", "High"))
table(dat$PS)
## tumour type (large, adeno, small or squamous)
# table(dat$celltype)
ype = 'l' , bty = "n", main = "", ylab = "log-odds", xlab = "Days", lwd = 2)
ype = 'l' , bty = "n", main = "", ylab = "log-odds", xlab = "Days", lwd = 2)
# Kaplan Meier
kme <- survfit(formula = Surv(time, status) ~ PS, data = dat)
pdf('kmeodds.pdf')
plot(kme, bty = 'n', xlab = "time",lwd = 3, cex.lab = 1.7, cex.axis = 1.7)
dev.off()
sum(kme$n.event> 1) #several ties
sum(kme$n.event== 1) # seventy-three distinct failure times
par(mfrow = c(1, 1))
### Making use of spsurv package
library(spsurv)
# devtools::install_github('rvpanaro/spsurv')
options(scipen=9999)
ype = 'l' , bty = "n", main = "", ylab = "log-odds", xlab = "Days", lwd = 2)
# dat
names(dat)
dat$PS
dat$karno
dat$celltype
library(timereg)
# install.packages('timereg')
library(survival)
library(dplyr)
dat$celltype <- factor(dat$celltype, levels = c("large", "adeno", "smallcell", "squamous"))
dat %>%
mutate(time_start = time, time_end = if_else(status == 1, time, Inf)) -> dat
# Observação: estou apenas transformando os dados em intervalor.
fit <- ic_sp(cbind(time_start, time_end) ~  karno + celltype,
data = dat, model = "po", bs_samples = 200 )
xtable::xtable(summary(fit))
fit <- prop.odds(Event(time, status) ~ karno + celltype, data = dat)
summary(fit)
class(fit)
model.matrix(fit)
fit
dat
celltype
predict(fit, newdata = c(karno = 60, celltype = 'large'))
predict(fit, newdata = c(karno = 60, celltype = factor('large')))
celltype
dat$celltype
predict(fit, newdata = c(karno = 60, celltype = factor('large')))
predict(fit, newdata = c(karno = 60, celltype = 'large')
predict(fit, newdata = c(karno = 60, celltype = 'large')
)for (i in 1:4){
print(exp(fit$gamma[[i]] + c(-1.96, + 1.96)*sqrt(fit$var.gamma[i, i])), digits = 4)
}
predict(fit, newdata = c(karno = 60, celltype = 'large'))
predict(fit, newdata = data.frame(karno = 60, celltype = 'large'))
fit
dat$celltype
data.frame(karno = c(60,60,60,60), celltype = factor(c('large', 'adeno', 'smallcell', 'squamous')))
new <- data.frame(karno = c(60,60,60,60), celltype = factor(c('large', 'adeno', 'smallcell', 'squamous')))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60,60), celltype = factor(c('large', 'adeno', 'smallcell', 'squamous')))
new
new$celltype
new <- data.frame(karno = c(60,60,60,60), celltype = c('large', 'adeno', 'smallcell', 'squamous'))
new
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60,60), celltype = c('large', 'adeno', 'smallcell', 'squamous'))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60,60), celltype = c(0, 1, 2, 3))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60,60), celltype = c(0, 1, 2, 3))
st <- predict(fit, newdata = new)
predict(fit, newdata = new)
new <- data.frame(karno = c(60), celltype = c(0))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60), celltype = c('large'))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60), celltype = factor('large', , levels = c("large", "adeno", "smallcell", "squamous") ))
new
st <- predict(fit, newdata = new)
fit
new <- data.frame(karno = c(60), celltypeadeno = 1, celltypesmallcell = 0, celltypesquamous = 0 ))
new <- data.frame(karno = c(60), celltypeadeno = c(1), celltypesmallcell = c(0),
celltypesquamous = c(0) )
new
st <- predict(fit, newdata = new)
dat$celltype
level(dat$celltype)
levels(dat$celltype)
new <- data.frame(karno = c(60), celltype= levels(dat$celltype)[1] )
new
st <- predict(fit, newdata = new)
levels(dat$celltype)[1]
c(levels(dat$celltype))
new <- data.frame(karno = c(60,60,60,60), celltype= c(levels(dat$celltype)) )
st <- predict(fit, newdata = new)
new
data(bmt)
tcell
bmt$tcell
factor(bmt$tcell)
as.numeric(levels(dat$celltype))
levels(dat$celltype)
new <- data.frame(karno = c(60,60,60,60), celltype= c(levels(dat$celltype)) )
new
new <- data.frame(age = c(77-attr(dat$age, 'scaled:center'),
77-attr(dat$age, 'scaled:center'),
77-attr(dat$age, 'scaled:center'),
77-attr(dat$age, 'scaled:center')),
stage2 = c(0-attr(dat$stage2, 'scaled:center'),
1-attr(dat$stage2, 'scaled:center'),
0-attr(dat$stage2, 'scaled:center'),
0-attr(dat$stage2, 'scaled:center')),
stage3 = c(0-attr(dat$stage3, 'scaled:center'),
0-attr(dat$stage3, 'scaled:center'),
1-attr(dat$stage3, 'scaled:center'),
0-attr(dat$stage3, 'scaled:center')),
stage4 = c(0-attr(dat$stage4, 'scaled:center'),
0-attr(dat$stage4, 'scaled:center'),
0-attr(dat$stage4, 'scaled:center'),
1-attr(dat$stage4, 'scaled:center')))
new
new <- data.frame(karno = c(60,60,60,60), celltype= c(levels(dat$celltype)) )
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60), celltype= c(levels(dat$celltype)[-1]) )
st <- predict(fit, newdata = new)
new
dat
names(fit)
fit <- prop.odds(Event(time, status) ~ karno + celltype, data = dat)
class(fit)
dimnames(fit)
dimnames(fit$gamma)
new <- data.frame(karno = c(60,60,60,60), celltypeadeno= c(levels(dat$celltype)) )
st <- predict(fit, newdata = new)
levels
levels(dat$celltype)
new <- data.frame(karno = c(60), celltype= factor(levels(dat$celltype), levels = levels(dat$celltype)))
new
str(new)
str(dat)
new <- data.frame(karno = c(60), celltype= c(1,2,3,4))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60), celltype= c(4,3,2,1))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60), celltype= factor(4,3,2,1))
st <- predict(fit, newdata = new)
factor(4,3,2,1)
factor(4,3,2,1)
factor(4,3,2,1)
new <- data.frame(karno = c(60), celltype= factor(c(4,3,2,1)))
st <- predict(fit, newdata = new)
new <- data.frame(karno = c(60,60,60,60), celltype= factor(c(4,3,2,1)))
st <- predict(fit, newdata = new)
new
str(new)
