// Generated by rstantools.  Do not edit by hand.

/*
    spsurv is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    spsurv is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with spsurv.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_spbp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spbp");
    reader.add_event(1, 1, "include", "/chunks/loglikbp.stan");
    reader.add_event(1, 0, "start", "/chunks/loglikbp.stan");
    reader.add_event(85, 84, "end", "/chunks/loglikbp.stan");
    reader.add_event(85, 2, "restart", "model_spbp");
    reader.add_event(139, 54, "end", "model_spbp");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
new_beta(const T0__& x,
             const T1__& alpha,
             const T2__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 7;
        stan::math::assign(prob, ((inc_beta(alpha, beta, 1) * pow(x, (alpha - 1))) * pow((1 - x), (beta - 1))));
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct new_beta_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
             const T1__& alpha,
             const T2__& beta, std::ostream* pstream__) const {
        return new_beta(x, alpha, beta, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
loglikph(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& B,
             const int& null, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(status));
        current_statement_begin__ = 13;
        validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(n);
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("h0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h0(n);
        stan::math::initialize(h0, DUMMY_VAR__);
        stan::math::fill(h0, DUMMY_VAR__);
        current_statement_begin__ = 15;
        validate_non_negative_index("H0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> H0(n);
        stan::math::initialize(H0, DUMMY_VAR__);
        stan::math::fill(H0, DUMMY_VAR__);
        current_statement_begin__ = 16;
        validate_non_negative_index("theta", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(n);
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        current_statement_begin__ = 18;
        stan::math::assign(h0, multiply(b, gamma));
        current_statement_begin__ = 19;
        stan::math::assign(H0, multiply(B, gamma));
        current_statement_begin__ = 20;
        stan::math::assign(theta, stan::math::exp(multiply(X, beta)));
        current_statement_begin__ = 22;
        if (as_bool(logical_eq(null, 1))) {
            current_statement_begin__ = 23;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(h0), status), H0));
        } else {
            current_statement_begin__ = 26;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_multiply(h0, theta)), status), elt_multiply(H0, theta)));
        }
        current_statement_begin__ = 28;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglikph_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& B,
             const int& null, std::ostream* pstream__) const {
        return loglikph(beta, gamma, status, X, b, B, null, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
loglikpo(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& B,
             const int& null, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 32;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(status));
        current_statement_begin__ = 33;
        validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(n);
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 34;
        validate_non_negative_index("r0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r0(n);
        stan::math::initialize(r0, DUMMY_VAR__);
        stan::math::fill(r0, DUMMY_VAR__);
        current_statement_begin__ = 35;
        validate_non_negative_index("R0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R0(n);
        stan::math::initialize(R0, DUMMY_VAR__);
        stan::math::fill(R0, DUMMY_VAR__);
        current_statement_begin__ = 36;
        validate_non_negative_index("theta", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(n);
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        current_statement_begin__ = 38;
        stan::math::assign(r0, multiply(b, gamma));
        current_statement_begin__ = 39;
        stan::math::assign(R0, multiply(B, gamma));
        current_statement_begin__ = 40;
        stan::math::assign(theta, stan::math::exp(multiply(X, beta)));
        current_statement_begin__ = 42;
        if (as_bool(logical_eq(null, 1))) {
            current_statement_begin__ = 43;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_divide(r0, add(1, R0))), status), stan::math::log(add(1, R0))));
        } else {
            current_statement_begin__ = 46;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_divide(elt_multiply(r0, theta), add(1, elt_multiply(R0, theta)))), status), stan::math::log(add(1, elt_multiply(R0, theta)))));
        }
        current_statement_begin__ = 48;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglikpo_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& B,
             const int& null, std::ostream* pstream__) const {
        return loglikpo(beta, gamma, status, X, b, B, null, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1>
loglikaft(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& gamma,
              const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& status,
              const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
              const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& b,
              const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& B,
              const T7__& tau,
              const int& null, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 54;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(status));
        current_statement_begin__ = 55;
        int m(0);
        (void) m;  // dummy to suppress unused var warning
        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,num_elements(gamma));
        current_statement_begin__ = 56;
        validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(n);
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 57;
        validate_non_negative_index("h0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h0(n);
        stan::math::initialize(h0, DUMMY_VAR__);
        stan::math::fill(h0, DUMMY_VAR__);
        current_statement_begin__ = 58;
        validate_non_negative_index("H0", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> H0(n);
        stan::math::initialize(H0, DUMMY_VAR__);
        stan::math::fill(H0, DUMMY_VAR__);
        current_statement_begin__ = 59;
        validate_non_negative_index("phi", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(n);
        stan::math::initialize(phi, DUMMY_VAR__);
        stan::math::fill(phi, DUMMY_VAR__);
        stan::math::assign(phi,stan::math::exp(multiply(X, beta)));
        current_statement_begin__ = 60;
        validate_non_negative_index("basis", "2", 2);
        validate_non_negative_index("basis", "n", n);
        validate_non_negative_index("basis", "m", m);
        std::vector<std::vector<std::vector<local_scalar_t__  >  >  > basis(2, std::vector<std::vector<local_scalar_t__> >(n, std::vector<local_scalar_t__>(m, local_scalar_t__(DUMMY_VAR__))));
        stan::math::initialize(basis, DUMMY_VAR__);
        stan::math::fill(basis, DUMMY_VAR__);
        current_statement_begin__ = 61;
        validate_non_negative_index("y", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y(n);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 62;
        local_scalar_t__ tau_alt(DUMMY_VAR__);
        (void) tau_alt;  // dummy to suppress unused var warning
        stan::math::initialize(tau_alt, DUMMY_VAR__);
        stan::math::fill(tau_alt, DUMMY_VAR__);
        current_statement_begin__ = 64;
        if (as_bool(logical_eq(null, 1))) {
            current_statement_begin__ = 65;
            stan::math::assign(h0, multiply(b, gamma));
            current_statement_begin__ = 66;
            stan::math::assign(H0, multiply(B, gamma));
            current_statement_begin__ = 67;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(h0), status), H0));
        } else {
            current_statement_begin__ = 70;
            stan::math::assign(tau_alt, max(elt_divide(time, phi)));
            current_statement_begin__ = 71;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 72;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(time, i, "time", 1) / tau_alt), 
                            "assigning variable y");
                current_statement_begin__ = 73;
                for (int k = 1; k <= m; ++k) {
                    current_statement_begin__ = 74;
                    stan::model::assign(basis, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()))), 
                                (new_beta(get_base1(y, i, "y", 1), k, ((m - k) + 1), pstream__) / tau_alt), 
                                "assigning variable basis");
                    current_statement_begin__ = 75;
                    stan::model::assign(basis, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()))), 
                                beta_cdf(get_base1(y, i, "y", 1), k, ((m - k) + 1)), 
                                "assigning variable basis");
                }
            }
            current_statement_begin__ = 78;
            stan::math::assign(h0, multiply(to_matrix(get_base1(basis, 1, "basis", 1)), gamma));
            current_statement_begin__ = 79;
            stan::math::assign(H0, multiply(to_matrix(get_base1(basis, 2, "basis", 1)), gamma));
            current_statement_begin__ = 80;
            stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_divide(h0, phi)), status), H0));
        }
        current_statement_begin__ = 82;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglikaft_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& time,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& gamma,
              const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& status,
              const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
              const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& b,
              const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& B,
              const T7__& tau,
              const int& null, std::ostream* pstream__) const {
        return loglikaft(time, beta, gamma, status, X, b, B, tau, null, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_spbp : public prob_grad {
private:
        int n;
        int m;
        int q;
        double tau;
        int approach;
        int null;
        int M;
        vector_d status;
        vector_d time;
        matrix_d X;
        matrix_d b;
        matrix_d B;
        double shape_gamma;
        double rate_gamma;
        double mean_beta;
        double sd_beta;
public:
    model_spbp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_spbp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_spbp_namespace::model_spbp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 1);
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            check_greater_or_equal(function__, "q", q, 1);
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "tau", "double", context__.to_vec());
            tau = double(0);
            vals_r__ = context__.vals_r("tau");
            pos__ = 0;
            tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau", tau, m);
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "approach", "int", context__.to_vec());
            approach = int(0);
            vals_i__ = context__.vals_i("approach");
            pos__ = 0;
            approach = vals_i__[pos__++];
            check_greater_or_equal(function__, "approach", approach, 0);
            check_less_or_equal(function__, "approach", approach, 1);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "null", "int", context__.to_vec());
            null = int(0);
            vals_i__ = context__.vals_i("null");
            pos__ = 0;
            null = vals_i__[pos__++];
            check_greater_or_equal(function__, "null", null, 0);
            check_less_or_equal(function__, "null", null, 1);
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 0);
            check_less_or_equal(function__, "M", M, 2);
            current_statement_begin__ = 97;
            validate_non_negative_index("status", "n", n);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(n));
            status = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < status_j_1_max__; ++j_1__) {
                status(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "status", status, 0);
            check_less_or_equal(function__, "status", status, 1);
            current_statement_begin__ = 98;
            validate_non_negative_index("time", "n", n);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(n));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "time", time, 0);
            current_statement_begin__ = 101;
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "q", q);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(n,q));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, q);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = q;
            size_t X_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("b", "n", n);
            validate_non_negative_index("b", "m", m);
            context__.validate_dims("data initialization", "b", "matrix_d", context__.to_vec(n,m));
            b = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, m);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            size_t b_j_2_max__ = m;
            size_t b_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    b(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 103;
            validate_non_negative_index("B", "n", n);
            validate_non_negative_index("B", "m", m);
            context__.validate_dims("data initialization", "B", "matrix_d", context__.to_vec(n,m));
            B = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, m);
            vals_r__ = context__.vals_r("B");
            pos__ = 0;
            size_t B_j_2_max__ = m;
            size_t B_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    B(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 106;
            context__.validate_dims("data initialization", "shape_gamma", "double", context__.to_vec());
            shape_gamma = double(0);
            vals_r__ = context__.vals_r("shape_gamma");
            pos__ = 0;
            shape_gamma = vals_r__[pos__++];
            check_greater_or_equal(function__, "shape_gamma", shape_gamma, 0);
            current_statement_begin__ = 107;
            context__.validate_dims("data initialization", "rate_gamma", "double", context__.to_vec());
            rate_gamma = double(0);
            vals_r__ = context__.vals_r("rate_gamma");
            pos__ = 0;
            rate_gamma = vals_r__[pos__++];
            check_greater_or_equal(function__, "rate_gamma", rate_gamma, 0);
            current_statement_begin__ = 108;
            context__.validate_dims("data initialization", "mean_beta", "double", context__.to_vec());
            mean_beta = double(0);
            vals_r__ = context__.vals_r("mean_beta");
            pos__ = 0;
            mean_beta = vals_r__[pos__++];
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "sd_beta", "double", context__.to_vec());
            sd_beta = double(0);
            vals_r__ = context__.vals_r("sd_beta");
            pos__ = 0;
            sd_beta = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 114;
            validate_non_negative_index("beta", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 115;
            validate_non_negative_index("gamma", "m", m);
            num_params_r__ += m;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_spbp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 114;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "q", q);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(q);
        size_t beta_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "m", m);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(m));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(m);
        size_t gamma_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 114;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(q, lp__);
            else
                beta = in__.vector_constrain(q);
            current_statement_begin__ = 115;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_lb_constrain(0, m, lp__);
            else
                gamma = in__.vector_lb_constrain(0, m);
            // model body
            {
            current_statement_begin__ = 119;
            validate_non_negative_index("loglik", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(n);
            stan::math::initialize(loglik, DUMMY_VAR__);
            stan::math::fill(loglik, DUMMY_VAR__);
            current_statement_begin__ = 120;
            if (as_bool(logical_eq(M, 0))) {
                current_statement_begin__ = 121;
                stan::math::assign(loglik, loglikpo(beta, gamma, status, X, b, B, null, pstream__));
            } else if (as_bool(logical_eq(M, 1))) {
                current_statement_begin__ = 124;
                stan::math::assign(loglik, loglikph(beta, gamma, status, X, b, B, null, pstream__));
            } else {
                current_statement_begin__ = 127;
                stan::math::assign(loglik, loglikaft(time, beta, gamma, status, X, b, B, tau, null, pstream__));
            }
            current_statement_begin__ = 130;
            lp_accum__.add(sum(loglik));
            current_statement_begin__ = 132;
            if (as_bool(logical_eq(approach, 1))) {
                current_statement_begin__ = 133;
                lp_accum__.add(normal_log<propto__>(beta, mean_beta, sd_beta));
                current_statement_begin__ = 134;
                lp_accum__.add(gamma_log<propto__>(gamma, shape_gamma, rate_gamma));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("gamma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_spbp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(q);
        size_t beta_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_lb_constrain(0, m);
        size_t gamma_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_spbp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_spbp_namespace::model_spbp stan_model;
#endif
