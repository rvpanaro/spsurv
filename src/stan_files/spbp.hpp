/*
    spsurv is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    spsurv is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with spsurv.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_spbp_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spbp");
    reader.add_event(1, 1, "include", "/chunks/loglikbp.stan");
    reader.add_event(1, 0, "start", "/chunks/loglikbp.stan");
    reader.add_event(40, 39, "end", "/chunks/loglikbp.stan");
    reader.add_event(40, 2, "restart", "model_spbp");
    reader.add_event(88, 48, "end", "model_spbp");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
loglikph(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& Z,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& B, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  loglik(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) loglik;  // dummy to suppress unused var warning

        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik,DUMMY_VAR__);
        current_statement_begin__ = 9;
        validate_non_negative_index("h0", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  h0(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) h0;  // dummy to suppress unused var warning

        stan::math::initialize(h0, DUMMY_VAR__);
        stan::math::fill(h0,DUMMY_VAR__);
        current_statement_begin__ = 10;
        validate_non_negative_index("H0", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  H0(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) H0;  // dummy to suppress unused var warning

        stan::math::initialize(H0, DUMMY_VAR__);
        stan::math::fill(H0,DUMMY_VAR__);
        current_statement_begin__ = 11;
        validate_non_negative_index("eta", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);


        current_statement_begin__ = 13;
        stan::math::assign(h0, multiply(b,gamma));
        current_statement_begin__ = 14;
        stan::math::assign(H0, multiply(B,gamma));
        current_statement_begin__ = 15;
        stan::math::assign(eta, multiply(Z,beta));
        current_statement_begin__ = 17;
        stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_multiply(h0,stan::math::exp(eta))),status),elt_multiply(H0,stan::math::exp(eta))));
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct loglikph_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& Z,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& B, std::ostream* pstream__) const {
        return loglikph(beta, gamma, status, Z, b, B, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
loglikpo(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& Z,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& B, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  loglik(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) loglik;  // dummy to suppress unused var warning

        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik,DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("r0", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  r0(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) r0;  // dummy to suppress unused var warning

        stan::math::initialize(r0, DUMMY_VAR__);
        stan::math::fill(r0,DUMMY_VAR__);
        current_statement_begin__ = 25;
        validate_non_negative_index("R0", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  R0(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) R0;  // dummy to suppress unused var warning

        stan::math::initialize(R0, DUMMY_VAR__);
        stan::math::fill(R0,DUMMY_VAR__);
        current_statement_begin__ = 26;
        validate_non_negative_index("eta", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(num_elements(status)));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);


        current_statement_begin__ = 28;
        stan::math::assign(r0, multiply(b,gamma));
        current_statement_begin__ = 29;
        stan::math::assign(R0, multiply(B,gamma));
        current_statement_begin__ = 30;
        stan::math::assign(eta, multiply(Z,beta));
        current_statement_begin__ = 32;
        stan::math::assign(loglik, add(elt_multiply(subtract(add(eta,stan::math::log(r0)),stan::math::log(add(stan::math::exp(eta),R0))),status),stan::math::log(add(1,elt_multiply(stan::math::exp(eta),R0)))));
        current_statement_begin__ = 35;
        stan::math::assign(loglik, subtract(elt_multiply(stan::math::log(elt_multiply(elt_divide(r0,add(1,R0)),stan::math::exp(eta))),status),elt_multiply(stan::math::log(add(1,R0)),stan::math::exp(eta))));
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct loglikpo_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& beta,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& gamma,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& status,
             const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& Z,
             const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& b,
             const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& B, std::ostream* pstream__) const {
        return loglikpo(beta, gamma, status, Z, b, B, pstream__);
    }
};

#include <meta_header.hpp>
 class model_spbp : public prob_grad {
private:
    int n;
    int m;
    int q;
    int approach;
    int M;
    vector_d status;
    matrix_d Z;
    matrix_d b;
    matrix_d B;
    double shape_gamma;
    double rate_gamma;
    double mean_beta;
    double sd_beta;
public:
    model_spbp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_spbp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_spbp_namespace::model_spbp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "approach", "int", context__.to_vec());
            approach = int(0);
            vals_i__ = context__.vals_i("approach");
            pos__ = 0;
            approach = vals_i__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 50;
            validate_non_negative_index("status", "n", n);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(n));
            validate_non_negative_index("status", "n", n);
            status = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < status_i_vec_lim__; ++i_vec__) {
                status[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 53;
            validate_non_negative_index("Z", "n", n);
            validate_non_negative_index("Z", "q", q);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec(n,q));
            validate_non_negative_index("Z", "n", n);
            validate_non_negative_index("Z", "q", q);
            Z = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(q));
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_m_mat_lim__ = n;
            size_t Z_n_mat_lim__ = q;
            for (size_t n_mat__ = 0; n_mat__ < Z_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Z_m_mat_lim__; ++m_mat__) {
                    Z(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("b", "n", n);
            validate_non_negative_index("b", "m", m);
            context__.validate_dims("data initialization", "b", "matrix_d", context__.to_vec(n,m));
            validate_non_negative_index("b", "n", n);
            validate_non_negative_index("b", "m", m);
            b = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            size_t b_m_mat_lim__ = n;
            size_t b_n_mat_lim__ = m;
            for (size_t n_mat__ = 0; n_mat__ < b_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < b_m_mat_lim__; ++m_mat__) {
                    b(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("B", "n", n);
            validate_non_negative_index("B", "m", m);
            context__.validate_dims("data initialization", "B", "matrix_d", context__.to_vec(n,m));
            validate_non_negative_index("B", "n", n);
            validate_non_negative_index("B", "m", m);
            B = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
            vals_r__ = context__.vals_r("B");
            pos__ = 0;
            size_t B_m_mat_lim__ = n;
            size_t B_n_mat_lim__ = m;
            for (size_t n_mat__ = 0; n_mat__ < B_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < B_m_mat_lim__; ++m_mat__) {
                    B(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "shape_gamma", "double", context__.to_vec());
            shape_gamma = double(0);
            vals_r__ = context__.vals_r("shape_gamma");
            pos__ = 0;
            shape_gamma = vals_r__[pos__++];
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "rate_gamma", "double", context__.to_vec());
            rate_gamma = double(0);
            vals_r__ = context__.vals_r("rate_gamma");
            pos__ = 0;
            rate_gamma = vals_r__[pos__++];
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "mean_beta", "double", context__.to_vec());
            mean_beta = double(0);
            vals_r__ = context__.vals_r("mean_beta");
            pos__ = 0;
            mean_beta = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "sd_beta", "double", context__.to_vec());
            sd_beta = double(0);
            vals_r__ = context__.vals_r("sd_beta");
            pos__ = 0;
            sd_beta = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 45;
            check_greater_or_equal(function__,"n",n,1);
            current_statement_begin__ = 46;
            check_greater_or_equal(function__,"m",m,1);
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"q",q,1);
            current_statement_begin__ = 48;
            check_greater_or_equal(function__,"approach",approach,0);
            check_less_or_equal(function__,"approach",approach,1);
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"M",M,0);
            check_less_or_equal(function__,"M",M,1);
            current_statement_begin__ = 50;
            check_greater_or_equal(function__,"status",status,0);
            check_less_or_equal(function__,"status",status,1);
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 58;
            check_greater_or_equal(function__,"shape_gamma",shape_gamma,0);
            current_statement_begin__ = 59;
            check_greater_or_equal(function__,"rate_gamma",rate_gamma,0);
            current_statement_begin__ = 60;
            current_statement_begin__ = 61;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 66;
            validate_non_negative_index("beta", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 67;
            validate_non_negative_index("gamma", "m", m);
            num_params_r__ += m;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_spbp() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "q", q);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(q));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(q));
        for (int j1__ = 0U; j1__ < q; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "m", m);
        context__.validate_dims("initialization", "gamma", "vector_d", context__.to_vec(m));
        vector_d gamma(static_cast<Eigen::VectorXd::Index>(m));
        for (int j1__ = 0U; j1__ < m; ++j1__)
            gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(q,lp__);
            else
                beta = in__.vector_constrain(q);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_lb_constrain(0,m,lp__);
            else
                gamma = in__.vector_lb_constrain(0,m);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 71;
            validate_non_negative_index("loglik", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  loglik(static_cast<Eigen::VectorXd::Index>(n));
            (void) loglik;  // dummy to suppress unused var warning

            stan::math::initialize(loglik, DUMMY_VAR__);
            stan::math::fill(loglik,DUMMY_VAR__);


            current_statement_begin__ = 72;
            if (as_bool(logical_eq(M,0))) {

                current_statement_begin__ = 73;
                stan::math::assign(loglik, loglikpo(beta,gamma,status,Z,b,B, pstream__));
            } else {

                current_statement_begin__ = 76;
                stan::math::assign(loglik, loglikph(beta,gamma,status,Z,b,B, pstream__));
            }
            current_statement_begin__ = 79;
            lp_accum__.add(sum(loglik));
            current_statement_begin__ = 81;
            if (as_bool(logical_eq(approach,1))) {

                current_statement_begin__ = 82;
                lp_accum__.add(normal_log<propto__>(beta, mean_beta, sd_beta));
                current_statement_begin__ = 83;
                lp_accum__.add(gamma_log<propto__>(gamma, shape_gamma, rate_gamma));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("gamma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_spbp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d beta = in__.vector_constrain(q);
        vector_d gamma = in__.vector_lb_constrain(0,m);
            for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < m; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_spbp";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_spbp_namespace::model_spbp stan_model;


#endif
